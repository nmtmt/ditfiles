_ffmpeggif(){
    input_path=$1
    dirname=$(dirname $input_path)
    filename=$(basename $input_path)
    name=${filename%.*}
    output_path=$dirname/$name.gif

    echo -e "\e[36mConvert $input_path to $output_path...\e[m"

    ffmpeg -i $input_path -filter_complex "[0:v] fps=30,scale=640:-1,split [a][b];[a] palettegen [p];[b][p] paletteuse" $output_path
}

ffmpeggif(){
    input_paths=($@)

    if [ -z $1 ];then
        echo Invalid input. You must specify files or directories including movies to be converted
        return
    fi

    for input_path in $input_paths; do

        if [ -d $input_path ];then
            movies=($(find $input_path -type f -name "*.mp4" -o -name "*.mpeg4" -o -name "*.MP4" -o -name "*.mov"))
        elif [ -f $input_path ];then
            if [[ $input_path = *.gif ]];then
                continue
            else
                movies=$input_path
            fi
        fi

        for movie in $movies;do
            _ffmpeggif $movie
        done
    done
}

_ffmpegcrop(){
    input_path=$1
    dirname=$(dirname $input_path)
    filename=$(basename $input_path)
    output_path=$dirname/cropped_$filename

    echo -e "\e[36mCrop $input_path to $output_path...\e[m"

    pixel_width=$2
    pixel_height=$3
    left_up_x=$4
    left_up_y=$5
    echo ffmpeg -i $input_path -filter:v "crop=$pixel_width:$pixel_height:$left_up_x:$left_up_y" -c:a copy $output_path
    ffmpeg -i $input_path -filter:v "crop=$pixel_width:$pixel_height:$left_up_x:$left_up_y" -c:a copy $output_path
}

ffmpegcrop(){
    if [ -z $1 ];then
        echo Invalid input. You must specify movie be cropped
        return
    fi
    _ffmpegcrop $@
}

wait_finish(){
    key_phrases=($@)
    if [ -z $1 ];then
        echo "Invalid input. You must specify key phrases of jobs!"
        return
    fi

    while true; do
        finished=1
        for key_phrase in $key_phrases; do

            ret=$(ps -o user,pid,command -u $USER | grep $key_phrase | grep -v grep)

            if [ ! -z $ret ];then
                echo \"$ret\" is running...
                finished=0
            fi
            sleep 1
        done
        if [ $finished -eq 1 ];then
            break
        fi
        sleep 60
    done
}

create_xkbmap_state(){
    if [ ! -d $HOME/.config ];then
        mkdir -p $HOME/.config
    fi
    if [ ! -f $HOME/.config/.xkbmap_state ];then
        touch $HOME/.config/.xkbmap_state
    fi
}
reset_xkbmap(){
    create_xkbmap_state
    setxkbmap -option
    xkbcomp -I$HOME/.config/xkb ~/.config/xkb/keymap/mymap $DISPLAY 2> /dev/null
    echo "mymap" > $HOME/.config/xkbmap_state
}
swapcaps(){
    create_xkbmap_state
    reset_xkbmap
    xkbcomp -I$HOME/.config/xkb ~/.config/xkb/keymap/mymap_swapcaps $DISPLAY 2> /dev/null
    echo "mymap_swapcaps" > $HOME/.config/xkbmap_state
}
nocaps(){
    create_xkbmap_state
    reset_xkbmap
    xkbcomp -I$HOME/.config/xkb ~/.config/xkb/keymap/mymap_nocaps $DISPLAY 2> /dev/null
    echo "mymap_nocaps" > $HOME/.config/xkbmap_state
}

# vim: filetype=zsh
